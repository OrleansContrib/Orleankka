<Project>

    <!-- Set the repository root into a variable -->
    <PropertyGroup>
        <SourceRoot>$(MSBuildThisFileDirectory)</SourceRoot>
    </PropertyGroup>

    <!-- Set common properties regarding assembly information and nuget packages -->
    <PropertyGroup>
        <Authors>Yevhen Bobrov</Authors>
        <Product>Orleankka</Product>
        <Copyright>since 2016 Â© Yevhen Bobrov. All rights reserved.</Copyright>
        <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
        <PackageProjectUrl>https://github.com/OrleansContrib/Orleankka</PackageProjectUrl>
        <PackageIcon>Logo.png</PackageIcon>
        <PackageIconUrl>https://github.com/OrleansContrib/Orleankka/raw/master/Logo.png</PackageIconUrl>
        <PackageTags>Orleans Distributed-Systems Messaging Actor Concurrency CQRS Functional F#</PackageTags>
        <PackageReleaseNotes></PackageReleaseNotes>
        <RepositoryUrl>https://github.com/OrleansContrib/Orleankka</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
		<IncludeSymbols>true</IncludeSymbols>
    	<SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <IncludeSource>true</IncludeSource>
    </PropertyGroup>

    <ItemGroup>
    	<None Include="$(SourceRoot)\LICENSE.txt" Pack="true" PackagePath="$(PackageLicenseFile)"/>
    	<None Include="$(SourceRoot)\Logo.png" Pack="true" PackagePath="\"/>
  	</ItemGroup>

    <!-- Common compile parameters -->
    <PropertyGroup>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
        <NoWarn>$(NoWarn);1591</NoWarn>
        <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
        <DebugType>portable</DebugType>
    </PropertyGroup>

    <!-- Common project props -->
    <PropertyGroup>
        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
        <LangVersion>9.0</LangVersion>
    </PropertyGroup>

    <PropertyGroup>
        <TargetFramework>net6.0</TargetFramework>
        <ConsoleProjectTargetFramework>net6.0</ConsoleProjectTargetFramework>
        <TestProjectTargetFramework>$(ConsoleProjectTargetFramework)</TestProjectTargetFramework>
    </PropertyGroup>

    <!-- Shared Package Versions -->
    <PropertyGroup>

        <!-- Framework packages -->
        <SystemTextJsonVersion>6.0.4</SystemTextJsonVersion>

        <!-- Orleans packages -->        
        <MicrosoftOrleansClientVersion>3.6.2</MicrosoftOrleansClientVersion>
        <MicrosoftOrleansServerVersion>3.6.2</MicrosoftOrleansServerVersion>
        <MicrosoftOrleansCoreVersion>3.6.2</MicrosoftOrleansCoreVersion>
        <MicrosoftOrleansCoreAbstractionsVersion>3.6.2</MicrosoftOrleansCoreAbstractionsVersion>
        <MicrosoftOrleansCodeGeneratorVersion>3.6.2</MicrosoftOrleansCodeGeneratorVersion>
        <MicrosoftOrleansRuntimeVersion>3.6.2</MicrosoftOrleansRuntimeVersion>
        <MicrosoftOrleansStreamingAzureStorageVersion>3.6.2</MicrosoftOrleansStreamingAzureStorageVersion>

        <!-- Microsoft extensions -->
        <MicrosoftExtensionsLoggingVersion>3.0.0</MicrosoftExtensionsLoggingVersion>
        <MicrosoftExtensionsLoggingConsoleVersion>6.0.0</MicrosoftExtensionsLoggingConsoleVersion>
        <MicrosoftExtensionsDependencyInjectionAbstractionsVersion>6.0.0</MicrosoftExtensionsDependencyInjectionAbstractionsVersion>
        <MicrosoftExtensionsHostingVersion>6.0.1</MicrosoftExtensionsHostingVersion>

        <!-- Testing packages -->
        <NUnitVersion>3.13.3</NUnitVersion>
        <NUnit3TestAdapterVersion>4.2.1</NUnit3TestAdapterVersion>
        <MicrosoftNETTestSdkVersion>17.2.0</MicrosoftNETTestSdkVersion>
        <PowerAssertVersion>1.0.87</PowerAssertVersion>

        <!-- 3rd party packages -->
        <WindowsAzureStorageVersion>9.3.3</WindowsAzureStorageVersion>
        <EventStoreClientAPINetCoreVersion>4.1.0.23</EventStoreClientAPINetCoreVersion>
        <StreamstoneVersion>2.3.1</StreamstoneVersion>
        <HyperionVersion>0.12.2</HyperionVersion>
        <GoogleProtobufVersion>3.21.0</GoogleProtobufVersion>

        <!-- 3rd party F# libs -->
        <TaskBuilderfsVersion>1.1.1</TaskBuilderfsVersion>

        <!-- Tooling related packages -->
        <SourceLinkVersion>2.8.3</SourceLinkVersion>

    </PropertyGroup>

    <!-- Versioning properties -->
    <PropertyGroup>
        <VersionPrefix Condition=" '$(VersionPrefix)'=='' ">2.0.0</VersionPrefix>
        <VersionSuffix Condition=" '$(VersionSuffix)'=='' ">dev</VersionSuffix>
    </PropertyGroup>

    <!-- For Debug builds generated a date/time dependent version suffix -->
    <PropertyGroup Condition=" '$(Configuration)'=='Debug' ">
        <VersionSuffix Condition=" '$(VersionSuffix)'=='' ">dev</VersionSuffix>
        <VersionSuffix Condition=" '$(VersionDateSuffix)'!='' ">$(VersionSuffix)-$(VersionDateSuffix)</VersionSuffix>
    </PropertyGroup>

    <!-- Set output folder for created NuGet packages -->
    <PropertyGroup>
        <PackageOutputPath Condition=" '$(PackageOutputPath)'=='' ">$(SourceRoot)Artifacts\$(Configuration)</PackageOutputPath>
    </PropertyGroup>

    <Choose>
        <When Condition="'$(OfficialBuild)' != 'true'">
            <!-- On non-official builds we don't burn in a git sha.  In large part because it
                 hurts our determinism efforts as binaries which should be the same between
                builds will not (due to developers building against different HEAD values -->
            <PropertyGroup>
                <GitHeadSha>&lt;developer build&gt;</GitHeadSha>
            </PropertyGroup>
        </When>
        <When Condition="'$(BUILD_SOURCEVERSION)' != ''">
            <PropertyGroup>
                <GitHeadSha>$(BUILD_SOURCEVERSION)</GitHeadSha>
            </PropertyGroup>
        </When>
        <When Condition="'$(BUILD_SOURCEVERSION)' == '' AND '$(GIT_COMMIT)' != ''">
            <PropertyGroup>
                <GitHeadSha>$(GIT_COMMIT)</GitHeadSha>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <GitHeadSha>Not found</GitHeadSha>
                <DotGitDir>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory).git'))</DotGitDir>
                <HeadFileContent Condition="Exists('$(DotGitDir)/HEAD')">$([System.IO.File]::ReadAllText('$(DotGitDir)/HEAD').Trim())</HeadFileContent>
                <RefPath Condition="$(HeadFileContent.StartsWith('ref: '))">$(DotGitDir)/$(HeadFileContent.Substring(5))</RefPath>
                <GitHeadSha Condition="'$(RefPath)' != '' AND Exists('$(RefPath)')">$([System.IO.File]::ReadAllText('$(RefPath)').Trim())</GitHeadSha>
                <GitHeadSha Condition="'$(HeadFileContent)' != '' AND '$(RefPath)' == ''">$(HeadFileContent)</GitHeadSha>
            </PropertyGroup>
        </Otherwise>
    </Choose>

</Project>
